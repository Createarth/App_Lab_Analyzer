import os
import mimetypes
import re
from collections import defaultdict
from fpdf import FPDF  # Added for PDF report generation

class VulnerabilityType:
    def __init__(self, name, description, use, severity, data_classification=None):
        self.name = name
        self.description = description
        self.use = use
        self.severity = severity
        self.data_classification = data_classification

def generate_vulnerability_report(vulnerability_types, system_type):
    print(f"{system_type} Vulnerability Severity Classification\n")

    for vulnerability_type in vulnerability_types:
        print(
            f"{vulnerability_type.name}\n"
            f"Description: {vulnerability_type.description}\n"
            f"Use: {vulnerability_type.use}\n"
            f"Severity: {vulnerability_type.severity}\n"
            f"Data Classification: {vulnerability_type.data_classification}\n"
            "----------------------------------------\n"
        )

class AnalysisModule:
    def __init__(self, folder_path):
        self.folder_path = folder_path
        self.file_sizes = {}
        self.file_types = {}
        self.functions_per_file = {}
        self.folder_structure = {}
        self.name = ''
        self.creator = ''
        self.purpose = ''

    def analyze(self):
        # Analyze the folder structure and collect information about each file
        for root, dirs, files in os.walk(self.folder_path):
            for file in files:
                file_path = os.path.join(root, file)
                # Extract information from the file
                file_size = os.path.getsize(file_path)
                file_type, _ = mimetypes.guess_type(file_path)
                functions = self.extract_functions_from_file(file_path)
                # Update the properties of the AnalysisModule instance
                self.file_sizes[file_path] = file_size
                self.file_types[file_path] = file_type
                self.functions_per_file[file_path] = functions
                # Update the folder structure
                folder = os.path.relpath(root, self.folder_path)
                if folder not in self.folder_structure:
                    self.folder_structure[folder] = []
                self.folder_structure[folder].append(file_path)

                # Extract additional information from files
                self.extract_additional_info(file_path)

    def extract_functions_from_file(self, file_path):
        functions = []
        with open(file_path, 'r') as file:
            content = file.read()

            # Use regular expressions to find function definitions
            pattern = r'def\s+(\w+)\s*\('
            functions = re.findall(pattern, content)

        return functions

    def extract_additional_info(self, file_path):
        with open(file_path, 'r') as file:
            content = file.read()

            # Search for name, creator, and purpose information
            search_terms = {
                'name': r'(?i)name:\s*(.*)',
                'creator': r'(?i)creator:\s*(.*)',
                'purpose': r'(?i)purpose:\s*(.*)',
            }

            for term, pattern in search_terms.items():
                match = re.search(pattern, content)
                if match:
                    if term == 'name':
                        self.name = match.group(1)
                    elif term == 'creator':
                        self.creator = match.group(1)
                    elif term == 'purpose':
                        self.purpose = match.group(1)

    def get_file_sizes(self):
        return self.file_sizes

    def get_file_types(self):
        return self.file_types

    def get_functions_per_file(self):
        return self.functions_per_file

    def get_folder_structure(self):
        return self.folder_structure

    def get_name(self):
        return self.name

    def get_creator(self):
        return self.creator

    def get_purpose(self):
        return self.purpose

def app_insight(name, creator, purpose):
    insights = f"Insights for {name}\n"
    insights += f"Created by {creator}\n"
    insights += f"Purpose: {purpose}\n"
    return insights

def app_insights(folder_structure, functions_per_file, file_sizes, file_types):
    insights = "Overall Application Insights\n"
    insights += f"Average File Size: {calculate_average_file_size(file_sizes):.2f} bytes\n"
    insights += f"Most Common File Type: {get_most_common_file_type(file_types)}\n"
    insights += f"Number of Files in Each Folder:\n"
    for folder, files in folder_structure.items():
        insights += f"{folder}: {len(files)} files\n"
    return insights

def file_insights(file_path, file_size, file_type, functions):
    insights = f"Insights for {file_path}\n"
    insights += f"Size: {file_size} bytes\n"
    insights += f"Type: {file_type}\n"
    return insights

def calculate_average_file_size(file_sizes):
    if not file_sizes:
        return 0
    return sum(file_sizes.values()) / len(file_sizes)

def get_most_common_file_type(file_types):
    if not file_types:
        return "No file types found"
    return max(file_types, key=file_types.get)

def generate_comprehensive_report(data):
    summary = data.describe()
    data.plot(kind='bar', x='Name', y='Value')

    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt="Comprehensive Report", ln=True, align='C')
    pdf.ln(10)
    pdf.multi_cell(0, 10, txt=f'Summary:\n{summary}\n\nBar Chart:\nSee attached image.', align='L')
    pdf.output("report.pdf")

    with open('report.pdf', 'rb') as f:
        report_content = f.read()

    return report_content

def iterate_for_insights(folder_path, analysis_module):
    insights = ""

    for root, dirs, files in os.walk(folder_path):
        for file in files:
            file_path = os.path.join(root, file)
            file_size = analysis_module.file_sizes[file_path]
            file_type = analysis_module.file_types[file_path]
            functions = analysis_module.functions_per_file[file_path]
            file_insight = file_insights(file_path, file_size, file_type, functions)
            insights += file_insight

    return insights

def generate_use_case_insights(folder_structure, functions_per_file):
    return "Use case insights go here"

def combine_insights(name, creator, purpose, folder_path, analysis_module, system_type):
    app_insight_info = app_insight(name, creator, purpose)
    app_insights_info = app_insights(
        analysis_module.folder_structure,
        analysis_module.functions_per_file,
        analysis_module.file_sizes,
        analysis_module.file_types
    )
    iterate_insights_info = iterate_for_insights(folder_path, analysis_module)
    combined_insights = app_insight_info + app_insights_info + iterate_insights_info

    # Generate use case insights
    use_case_insights = generate_use_case_insights(
        analysis_module.folder_structure,
        analysis_module.functions_per_file
    )

    # Generate comprehensive report
    comprehensive_report = generate_comprehensive_report(analysis_module.get_file_sizes())

    # Generate vulnerability report
    generate_vulnerability_report(ai_vulnerabilities, system_type)

    return combined_insights, use_case_insights, comprehensive_report

# Define instances of the VulnerabilityType class for AI system vulnerabilities
ai_vulnerabilities = [
    VulnerabilityType(
        "Model Inversion Attacks",
        "Attackers infer sensitive information about training data or the model itself",
        "AI Systems",
        "High"
    ),
    VulnerabilityType(
        "Adversarial Attacks",
        "Attackers manipulate inputs to mislead the model's predictions",
        "AI Systems",
        "Critical"
    ),
    # Add other AI system vulnerabilities...
]

# Example usage of the AnalysisModule
folder_path = "/path/to/your/application"
analysis_module = AnalysisModule(folder_path)
analysis_module.analyze()

# Example usage of combining insights
name = analysis_module.get_name()
creator = analysis_module.get_creator()
purpose = analysis_module.get_purpose()
system_type = "Computer Systems"  # You can specify the type of system here
combined_insights, use_case_insights, comprehensive_report = combine_insights(
    name, creator, purpose, folder_path, analysis_module, system_type
)

# Print or use the insights as needed
print("Combined Insights:")
print(combined_insights)

print("\nUse Case Insights:")
print(use_case_insights)

# Save the comprehensive report to a file or use it as needed
with open('comprehensive_report.pdf', 'wb') as report_file:
    report_file.write(comprehensive_report)
